---
description: Comprehensive guidelines for Angular, SASS, and TypeScript, focusing on scalable web development.
alwaysApply: true
globs:
  - "**/*.ts"
  - "**/*.scss"
  - "**/*.html"
---

# Angular Development Guidelines

You are an expert in Angular, SASS, and TypeScript, focusing on scalable web development. Adhere strictly to the following guidelines for all code generation and modifications.

## Key Principles
- Provide clear, precise Angular and TypeScript examples.
- Apply immutability and pure functions where applicable.
- Favor component composition for modularity.
- Use meaningful variable names (e.g., `isActive`, `hasPermission`).
- Use kebab-case for file names (e.g., `user-profile.component.ts`).
- Prefer named exports for components, services, and utilities.

## TypeScript & Angular Specifics
- Define data structures with interfaces for type safety.
- Avoid `any` type, utilize the type system fully.
- Organize files: imports, definition, implementation.
- Use template strings for multi-line literals.
- Utilize optional chaining (`?.`) and nullish coalescing (`??`).
- Use standalone components when applicable to reduce boilerplate and improve tree-shaking.
- Leverage Angular's signals system for efficient state management and reactive programming.
- Use the `inject` function for injecting services directly within component, directive or service logic, enhancing clarity and reducing boilerplate.

## File Naming Conventions
- `*.component.ts` for Components
- `*.service.ts` for Services
- `*.module.ts` for Modules
- `*.directive.ts` for Directives
- `*.pipe.ts` for Pipes
- `*.spec.ts` for Tests
- All files use kebab-case (e.g., `my-component.component.ts`).

## Code Style
- Use single quotes for string literals.
- Indent with 2 spaces.
- Ensure clean code with no trailing whitespace.
- Use `const` for immutable variables.
- Use template strings for string interpolation.

## Angular-Specific Guidelines
- Use async pipe for observables in templates to handle subscriptions automatically.
- Implement lazy loading for feature modules to reduce initial bundle size.
- Ensure accessibility with semantic HTML and ARIA labels.
- Utilize deferrable views (`@defer` block) for optimizing component rendering, deferring non-critical views until necessary.
- Incorporate Angular's signals system to enhance reactive programming and state management efficiency.
- Use the `NgOptimizedImage` directive for efficient image loading, improving performance and preventing broken links.

## Import Order
1. Angular core and common modules (e.g., `@angular/core`, `@angular/common`)
2. RxJS modules (e.g., `rxjs`, `rxjs/operators`)
3. Other Angular modules (e.g., `@angular/router`, `@angular/forms`)
4. Application core imports (e.g., from `src/app/core`)
5. Shared module imports (e.g., from `src/app/shared`)
6. Environment-specific imports (e.g., `src/environments`)
7. Relative path imports (e.g., `../models`, `./my-helper`)

## Error Handling and Validation
- Use proper error handling in services and components (e.g., `catchError` from RxJS).
- Use custom error types or factories for specific application errors.
- Implement Angular form validation (template-driven or reactive forms) or custom validators.

## Testing
- Follow the Arrange-Act-Assert (AAA) pattern for tests.

## Performance Optimization
- Optimize `ngFor` with `trackBy` functions to improve rendering performance for lists.
- Use pure pipes for expensive computations to prevent re-computation on every change detection cycle.
- Avoid direct DOM manipulation; use Angular's templating system and directives.
- Optimize rendering performance by deferring non-essential views using `@defer` blocks.
- Use Angular's signals system to manage state efficiently and reduce unnecessary re-renders.
- Use the `NgOptimizedImage` directive to enhance image loading and performance.

## Security
- Prevent XSS (Cross-Site Scripting) with Angular's built-in sanitization; avoid using `[innerHTML]`.
- Sanitize dynamic content with Angular's built-in tools (e.g., `DomSanitizer`).

## Key Conventions
- Use Angular's DI (Dependency Injection) system and the `inject` function for service injection.
- Focus on reusability and modularity in component and service design.
- Follow Angular's official style guide.
- Optimize with Angular's best practices for performance and maintainability.
- Focus on optimizing Web Vitals like LCP (Largest Contentful Paint), INP (Interaction to Next Paint), and CLS (Cumulative Layout Shift).

## Reference
Refer to Angular's official documentation for best practices in Components, Services, and Modules.